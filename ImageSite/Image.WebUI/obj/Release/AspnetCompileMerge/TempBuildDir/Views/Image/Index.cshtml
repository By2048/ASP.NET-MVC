@using Image.WebUI.Models.Home

@{
    ViewBag.Title = "TestIndex";
}

<script type="text/javascript">
    //改变透明度参数：图片对象，透明度：1-100的值
    function setAlpha(imgObj, opacityValue) {
        imgObj.filters.alpha.opacity = parseInt(opacityValue);
    }
    //图片的显示大小[以宽度来限制]
    function DrawImageW(imgObj, widthValue) {
        var image = new Image();
        image.src = imgObj.src;
        if (image.width > 0 && image.height > 0) {
            if (image.width >= widthValue) {
                imgObj.width = widthValue;
                imgObj.height = (image.height * widthValue) / image.width;
            } else {
                imgObj.width = image.width;
                imgObj.height = image.height;
            }
        }
    }
    //图片的显示大小[以高度来限制]
    function DrawImageH(imgObj, heightValue) {
        var image = new Image();
        image.src = imgObj.src;
        if (image.width > 0 && image.height > 0) {
            if (image.height >= heightValue) {
                imgObj.height = heightValue;
                imgObj.width = (image.width * heightValue) / image.height;
            } else {
                imgObj.width = image.width;
                imgObj.height = image.height;
            }
        }
    }
    //图片的显示大小[宽高同时限制]
    function DrawImage(imgObj, widthValue, heightValue) {
        var image = new Image();
        image.src = imgObj.src;
        if (image.width > 0 && image.height > 0) {
            if (image.height > heightValue || image.width > widthValue) {
                var h = 0, w, wflg = false;
                if (image.height > heightValue)
                    wflg = true;
                if (wflg) {
                    w = widthValue;
                    h = (image.height * widthValue) / image.width;
                }
                if (h == 0 || h > heightValue) {
                    h = heightValue;
                    w = (image.width * heightValue) / image.height;
                }
                //alert(w)
                //alert(h)
                imgObj.width = w;
                imgObj.height = h;
            } else {
                imgObj.width = image.width;
                imgObj.height = image.height;
            }
        }
    }
    function zoomImg(imgObj) {
        var zoom = parseInt(imgObj.style.zoom, 10) || 100; zoom += event.wheelDelta / 12;
        if (zoom > 0)
            imgObj.style.zoom = zoom + '%';
        return false;
    }

</script>

<style>
    .content_right {
        float: right;
        height: 750px;
        margin-right: 15px;
        width: 850px;
    }

    .show_image {
        display: table;
        width: 900px;
        height: 700px;
        text-align: center;
    }

        .show_image span {
            display: table-cell;
            vertical-align: middle;
        }

        .show_image image {
            vertical-align: middle;
        }

    .image_page_list {
        width: 850px;
        height: 50px;
        text-align: center;
        bottom: 0;
        position: absolute;
    }

        .image_page_list .pagination-container {
            height: 50px;
        }
</style>


@{
    int folderId, folderPage, pageIndex, pageCount, prevPage, nextPage,startNum = 1;

    folderId = HomeIndexModel.FolderId;
    pageIndex = HomeIndexModel.PageImage.PageIndex;
    pageCount = HomeIndexModel.PageImage.PageCount;
    folderPage = HomeIndexModel.PageFolder.PageIndex;
    string keyWord = HomeIndexModel.KeyWord;


    prevPage = pageIndex - 8;
    nextPage = pageIndex + 8;



    if (pageIndex % 8 == 0)
    {
        startNum = (pageIndex / 8 - 1) * 8 + 1;
    }
    else
    {
        startNum = (pageIndex / 8) * 8 + 1;
    }

    bool hasNext = pageCount - (startNum + 8) > 0 ? true : false;
    bool hasPrev = startNum == 0 ? false : true;

    if (hasPrev)
    {
        prevPage = startNum - 8;
    }
    else
    {
        prevPage = 1;
    }
    if (hasNext)
    {
        if (pageCount - startNum >= 8)
        {
            nextPage = startNum + 8;
        }
        else
        {
            nextPage = startNum;
        }
    }
    else
    {
        nextPage = pageCount;
    }

}

<div class="content_right">
    <div class="show_image">
        @foreach (var item in HomeIndexModel.PageImage.GetPagingData())
        {
            <span>
                <img src="@item.Path" alt="@item.Name" class="img-thumbnail" onload="javascript: DrawImage(this,900,700)" />
            </span>
        }
    </div>

    <div class="image_page_list">
        <ul class="pagination">
            @if (hasPrev)
            {
                <li class="previous">
                    <a href="@Url.Action("Index", "Home",new { folderPage = folderPage, folderId =folderId, imagePage = prevPage, keyWord = keyWord})">上一页</a>
                </li>
            }
            else
            {
                <li class="previous disabled">
                    <span>上一页</span>
                </li>
            }

            @for (int i = startNum, j = 0; i < pageCount && j < 8; i++, j++)
            {
                if (i == pageIndex)
                {
                    <li class="active">
                        <a href="@Url.Action("Index", "Home", new { folderPage = folderPage, folderId = folderId, imagePage = i, keyWord = keyWord })">@i</a>
                    </li>
                }
                else
                {
                    <li>
                        <a href="@Url.Action("Index", "Home",new { folderPage = folderPage, folderId = folderId, imagePage = i , keyWord = keyWord})">@i</a>
                    </li>
                }
            }

            @if (hasNext)
            { 
                <li class="next">
                    <a href="@Url.Action("Index", "Home",new { folderPage = folderPage, folderId =folderId, imagePage = nextPage})">下一页</a>
                </li>
            }
            else
            {
                <li class="next disabled">
                    <span>下一页</span>
                </li>
            }
        </ul>




    </div>
</div>


<script>
    $(document).ready(function () {
        //初始化加载是否添加收藏
        $.ajax({
            type: "POST",
            url: "/Favorite/IsAddFavorites",
            data: {
                FolderId: @folderId,
            },
            success: function (data) {
                if (data.status == true) {
                    $("#btnFavorite span").removeClass("glyphicon glyphicon-heart-empty");
                    $("#btnFavorite span").addClass("glyphicon glyphicon-heart");
                }
            }
        });

        //未添加收藏添加
        //添加则删除
        $("#btnFavorite").click(function () {
            //添加
            $.ajax({
                type: "POST",
                url: "/Favorite/AddFavorites",
                data: {
                    FolderId: @folderId,
                },
                success: function (data) {
                    if (data.status == true) {
                        $("#btnFavorite span").removeClass("glyphicon glyphicon-heart-empty");
                        $("#btnFavorite span").addClass("glyphicon glyphicon-heart");
                    } else {
                        //删除
                        $.ajax({
                            type: "POST",
                            url: "/Favorite/DelFavorites",
                            data: {
                                FolderId: @folderId,
                            },
                            success: function (data) {
                                if (data.status == true) {
                                    $("#btnFavorite span").removeClass("glyphicon glyphicon-heart");
                                    $("#btnFavorite span").addClass("glyphicon glyphicon-heart-empty");
                                }
                            }
                        });
                    }
                }
            });
        });
    });
</script>